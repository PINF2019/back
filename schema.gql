# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Candidate {
  id: ID!
  firstName: String!
  lastName: String!
  about: String
  image: String
}

input CandidateInput {
  firstName: String!
  lastName: String!
  about: String
}

type Census {
  id: ID!
  group: String!
  date: DateTime!
  location: String!
  voters: [Voter!]!
}

input CensusInput {
  group: String!
  date: DateTime!
  location: String!
  file: String!
}

type ColegiateBody {
  id: ID!
  name: String!
}

input ColegiateBodyInput {
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Election {
  id: ID!
  start: DateTime!
  end: DateTime!
  description: String!
  isVoteRectify: Boolean!
  candidates: [Candidate!]!
  results(filter: ResultsFilter = {group: false, location: false, genre: false}): [ElectionResults!]!
  censuses: [Census!]!
  delegates: [User!]!
}

input ElectionInput {
  start: DateTime!
  end: DateTime!
  description: String!
  isVoteRectify: Boolean!
  censuses: [CensusInput!]!
  delegates: [UserInput!]!
  candidates: [CandidateInput!]!
}

type ElectionResults {
  votes: Int!
  group: String
  location: String
  genre: Genre
  candidate: Candidate!
}

type ElectionVote {
  id: ID!
  user: ID!
  election: ID!
  candidate: ID!
}

union ElectoralProcess = Election | Poll

type File {
  name: String!
}

enum Genre {
  MALE
  FEMALE
  OTHER
}

input LoginInput {
  uid: String!
  password: String!
}

type LoginPayload {
  accessToken: String!
}

type Mutation {
  modifyUser(input: UserUpdateInput!, id: ID!): User!
  deleteUser(id: ID!): User!
  login(input: LoginInput!): LoginPayload!
  deleteCandidate(id: ID!, election: ID!): Candidate!
  createElection(input: ElectionInput!): Election!
  voteOnElection(input: VoteElectionInput!): Boolean!
  modifyElection(input: UpdateElectionInput!, id: ID!): Election!
  deleteElection(id: ID!): Election!
  uploadFile(file: Upload!): File!
  createPoll(input: PollInput!): Poll!
  voteOnPoll(input: VotePollInput!): Boolean!
  modifyPoll(input: UpdatePollInput!, id: ID!): Poll!
  deletePoll(id: ID!): Poll!
}

type Poll {
  id: ID!
  start: DateTime!
  end: DateTime!
  description: String!
  isVoteRectify: Boolean!
  question: String!
  options: [PollOption!]!
  isRealTime: Boolean!
  censuses: [Census!]!
  results(filter: ResultsFilter = {group: false, location: false, genre: false}): [PollResults!]!
  delegates: [User!]!
}

input PollInput {
  start: DateTime!
  end: DateTime!
  description: String!
  isVoteRectify: Boolean!
  censuses: [CensusInput!]!
  delegates: [UserInput!]!
  question: String!
  options: [String!]!
  isRealTime: Boolean!
}

type PollOption {
  id: ID!
  text: String!
}

type PollResults {
  id: ID!
  votes: Int!
  group: String
  location: String
  genre: Genre
  option: PollOption!
}

type PollVote {
  id: ID!
  user: String!
  poll: String!
  option: String!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  me: User!
  colegiateBody(id: ID!): ColegiateBody!
  collegiateBodies: [ColegiateBody!]!
  electoralProcesses(open: Boolean = false, finished: Boolean = false): [ElectoralProcess!]!
  electoralProcess(id: ID!): ElectoralProcess!
  pendingElectoralProcesses: [ElectoralProcess!]!
  elections: [Election!]!
  pendingElections: [Election!]!
  election(id: ID!): Election!
  census(id: ID!): Census!
  censuses(skip: Int = 0, limit: Int = 0): [Census!]!
  polls: [Poll!]!
  poll(id: ID!): Poll!
  pendingPolls: [Poll!]!
}

input ResultsFilter {
  group: Boolean!
  location: Boolean!
  genre: Boolean!
}

"""All possible roles on app"""
enum Role {
  ADMIN
  SECRETARY
}

input UpdateElectionInput {
  start: DateTime
  end: DateTime
  description: String
  censuses: [CensusInput!]
  delegates: [UserInput!]
  candidates: [CandidateInput!]
}

input UpdatePollInput {
  start: DateTime
  end: DateTime
  description: String
  censuses: [CensusInput!]
  delegates: [UserInput!]
  question: String
  options: [String!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID!
  uid: String!
  firstName: String!
  lastName: String!
  roles: [Role!]!
  genre: Genre!
  colegiateBody: ColegiateBody!
}

input UserInput {
  uid: String!
  password: String!
  firstName: String!
  lastName: String!
  roles: [Role!] = []
  collegiateBody: ColegiateBodyInput!
}

input UserUpdateInput {
  password: String
  firstName: String
  lastName: String
  roles: [Role!]
  colegiateBody: ColegiateBodyInput
}

input VoteElectionInput {
  candidate: ID!
  election: ID!
  rectifiedVote: ID
}

input VotePollInput {
  option: ID!
  poll: ID!
}

type Voter {
  firstName: String!
  lastName: String!
  uid: String!
}
